## Default values for Robomotion RPA
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Configure the ingress resource that allows you to access the
## Robomotion installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
ingress:

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  annotations:
    kubernetes.io/ingress.class: public

  hosts:
    - name: robomotion.local
      # Set this to true in order to enable TLS on the ingress record
      tls: true
      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      tlsSecret: robomotion-local-tls
      ## Set this to true if multi tenant
      multiTenant: false
      ## If TLS and multiTenant is set to true, you must declare what secret will store the wildcard key/certificate for TLS
      wildSecret: wild-robomotion-local-tls

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: robomotion.local-tls
  #   key:
  #   certificate:

serviceAccount:
  name: robomotion

service:
  type: ClusterIP
  port: 80

## Configuration values for the postgresql dependency.
## Ref: https://github.com/helm/charts/blob/master/stable/postgresql/README.md
##
postgresql:

  ## Use the PostgreSQL chart dependency.
  ##
  enabled: true

  auth:
    ### PostgreSQL User to create.
    ##
    username: postgres

    ## PostgreSQL Password for the new user.
    ## If not set, a random 10 characters password will be used.
    ##
    # password: 

    ## PostgreSQL Database to create.
    ##
    database: robomotion

  ## PostgreSQL service port
  service:
    port: 5432

  ## Persistent Volume Storage configuration for PostgreSQL.
  ##
  ## Ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  ##
  persistence:
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    ##
    enabled: true

    ## Persistent Volume Storage Class to be used by PersistentVolumes created
    ## for PostgreSQL.
    ##
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass:

    ## Persistent Volume Access Mode.
    ##
    accessModes:
      - ReadWriteOnce

    ## Persistent Volume Storage Size.
    ##
    size: 2Gi

redis:
  ## Use the redis chart dependency.
  ##
  enabled: true

  redisPort: 6379

  master:
    configuration: |-
      notify-keyspace-events "g$E"
    persistence:
      enabled: true
      storageClass:
      accessModes:
        - ReadWriteOnce
      size: 1Gi

  ##
  ## Disable cluster management by default.
  cluster:
    enabled: false

nginx:
  name: nginx

minio:
  ## Use the minio chart dependency.
  ##
  enabled: true
  serviceType: ClusterIP
  ingress:
    path: /objects
  ## minio uses this
  defaultBuckets: "robomotion,apps,applications"
  command: 
    - touch /tmp/latif.txt
  ## robomotion charts uses this
  defaultBucket:
    name: robomotion
  defaultAppBucket:
    name: apps
  defaultApplicationBucket:
    name: applications
  resources:
    requests:
      memory: 512Mi
  persistence:
    enabled: true
    storageClass:
    accessModes:
      - ReadWriteOnce
    ## Persistent Volume Storage Size.
    ##
    size: 3Gi

# https://cert-manager.io/docs/configuration/acme/
# solver should be http01 or dns01
certmanager:
  enabled: false
  email:
  solver: http01

nginx-ingress:
  enabled: true
  controller:
    publishService:
      enabled: true

smtp:
  enabled: false
  address: smtp.mailgun.org
  port: 2525
  user:
  password:

superadmin:
  enabled: false

clickhouse:
  service:
    port: 9000
  persistence:
    data:
      size: 10Gi
    log:
      size: 1Gi

# Private image registry secret
registry:
  secret:

# Robomotion Admin Console
admin:
  name: admin
  image: gcr.io/robomotion/robomotion-admin
  imageTag: 08ff9f479
  ingress:
    path: /admin

# Robomotion API service
api:
  name: api
  image: gcr.io/robomotion/robomotion-api-service
  imageTag: 08ff9f479
  superAdminIP:
  replyMail:
  ingress:
    path: /api
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 16m

# Robomotion Login
auth:
  name: authorization
  image: gcr.io/robomotion/robomotion-authorization
  imageTag: 08ff9f479
  ingress:
    path: /

# Robomotion Login
forms:
  name: forms
  image: gcr.io/robomotion/robomotion-forms
  imageTag: 08ff9f479
  ingress:
    path: /forms

# Robomotion Flow Designer
designer:
  name: designer
  image: gcr.io/robomotion/robomotion-designer
  imageTag: 08ff9f479
  ingress:
    path: /designer
    annotations:
      nginx.org/websocket-services: "ws-svc"    

# Robomotion Proxy Service
proxy:
  name: proxy
  image: gcr.io/robomotion/robomotion-proxy
  imageTag: 08ff9f479
  ingress:
    path: /proxy
    annotations:
      nginx.org/websocket-services: "ws-svc"    

# Robomotion App Service
app:
  name: app
  image: gcr.io/robomotion/robomotion-app
  imageTag: 08ff9f479
  ingress:
    path: /mq/(.*)
    annotations:
      nginx.org/websocket-services: "ws-svc"
      nginx.ingress.kubernetes.io/rewrite-target: /$1

# Robomotion Scheduler
scheduler:
  name: scheduler
  image: gcr.io/robomotion/robomotion-scheduler
  imageTag: 08ff9f479

# Robomotion migrations
migrations:
  name: migrations
  image: gcr.io/robomotion/robomotion-migrations
  imageTag: 08ff9f479

# Robomotion clickhouse migrations
clickhouseMigrations:
  name: migrations-clickhouse
  image: gcr.io/robomotion/robomotion-migrations-clickhouse
  imageTag: 199b1fb69

# Robomotion Bot Console
bots:
  name: bot-console
  image: gcr.io/robomotion/robomotion-bot-console
  imageTag: 8e846f9
  ingress:
    path: /bots

userApps:
  name: user-apps
  ingress:
    path: /apps

# Robomotion monitoring
monitoring:
  name: monitoring
  image: gcr.io/robomotion/robomotion-monitoring-service
  imageTag: 08ff9f479

## External database configuration
##
externalDatabase:
  ## Database host
  host:

  ## Database port
  port: 5432

  ## Database user
  user: robomotion

  ## Database password
  password:

  ## Database name
  database: robomotion  

## External object store configuration
##
externalObjectStore:
  ## Object store location
  location:

  ## Object store bucket name
  bucket: robomotion

  ## App object store bucket name
  bucket: apps

  ## Object store access key
  accessKey:

  ## Object store secret key
  secretKey:

## External redis
##
externalRedis:
  ## Redis host
  host: 

  ## Redis port
  port:

  ## Redis password
  password:
